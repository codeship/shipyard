// --------------------------------------------------
// Responsive Mixins (Utilities)
// --------------------------------------------------
// Usage:
// +media(max-width $mobile-max)                          -> styles any screens *smaller* then $mobile-max
// +media(min-width $tablet-min)                          -> styles any screens *larger* then $tablet-min
// +media(max-width $tablet-max)                          -> styles any screens *smaller* then $tablet-max
// +media(min-width $desktop-min)                         -> styles any screens *larger* then $desktop-min
// +media(min-width 500px)                                -> styles any screens *larger* then 500px
// +media(max-width 500px)                                -> styles any screens *smaller* then 500px
// +media(min-height 500px)                               -> styles any screens *taller* then 500px
// +media(max-height 500px)                               -> styles any screens *shorter* then 500px
// +media(min-width $tablet-min max-width $tablet-max)    -> styles any screens *between* $tablet-min and $tablet-max
// +media(min-width 500px max-width 1000px)               -> styles any screens *between* 500px and 1000px wide
// +media(min-height 500px max-height 1000px)             -> styles any screens *between* 500px and 1000px tall
@mixin media($args)
  @if length($args) > 6
    @media screen and (#{nth($args, 1)}: nth($args, 2)) and (#{nth($args, 3)}: nth($args, 4)), screen and (#{nth($args, 5)}: nth($args, 6)) and (#{nth($args, 7)}: nth($args, 8))
      @content
  @else if length($args) > 4
    @media screen and (#{nth($args, 1)}: nth($args, 2)), screen and (#{nth($args, 3)}: nth($args, 4)) and (#{nth($args, 5)}: nth($args, 6))
      @content
  @else if length($args) > 2
    @media screen and (#{nth($args, 1)}: nth($args, 2)) and (#{nth($args, 3)}: nth($args, 4))
      @content
  @else
    @media screen and (#{nth($args, 1)}: nth($args, 2))
      @content

@mixin all-media-sizes
  @content
  @each $breakpoint, $min-width in $breakpoints
    @at-root #{".#{$breakpoint}\\:" + str-slice("#{&}", 2)}
      +media(min-width $min-width)
        @content

@mixin breakpoint-all
  +media(max-width map-get($breakpoints, sm) - 1)
    @content

@mixin breakpoint-sm
  +media(min-width map-get($breakpoints, sm))
    @content

@mixin breakpoint-md
  +media(min-width map-get($breakpoints, md))
    @content

@mixin breakpoint-lg
  +media(min-width map-get($breakpoints, lg))
    @content

@mixin breakpoint-xl
  +media(min-width map-get($breakpoints, xl))
    @content

@mixin responsive-padding($properties: null, $divisor: 2)
  transition: padding 500ms ease
  @if $properties
    @each $property in $properties
      padding-#{$property}: map-get($margins, all) / $divisor
    +breakpoint-sm
      @each $property in $properties
        padding-#{$property}: map-get($margins, sm) / $divisor
    +breakpoint-md
      @each $property in $properties
        padding-#{$property}: map-get($margins, md) / $divisor
  @else
    +respond-to(padding, (all: map-get($margins, all), sm: map-get($margins, sm), md: map-get($margins, md)))

@mixin responsive-margin($properties, $divisor: 2)
  transition: margin 500ms ease
  @each $property in $properties
    margin-#{$property}: map-get($margins, all) / $divisor
  +breakpoint-sm
    @each $property in $properties
      margin-#{$property}: map-get($margins, sm) / $divisor
  +breakpoint-md
    @each $property in $properties
      margin-#{$property}: map-get($margins, md) / $divisor

@mixin respond-to($property, $breakpoints)
  @if map-has-key($breakpoints, all)
    #{$property}: map-get($breakpoints, all)
  @if map-has-key($breakpoints, sm)
    +breakpoint-sm
      #{$property}: map-get($breakpoints, sm)
  @if map-has-key($breakpoints, md)
    +breakpoint-md
      #{$property}: map-get($breakpoints, md)
  @if map-has-key($breakpoints, lg)
    +breakpoint-lg
      #{$property}: map-get($breakpoints, lg)

@mixin responsive-left
  +respond-to(left, (all: map-get($margins, all), sm: map-get($margins, sm), md: map-get($margins, md)))

@mixin responsive-right
  +respond-to(right, (all: map-get($margins, all), sm: map-get($margins, sm), md: map-get($margins, md)))

@mixin responsive-padding-left
  +respond-to(padding-left, (all: map-get($margins, all), sm: map-get($margins, sm), md: map-get($margins, md)))

@mixin responsive-padding-right
  +respond-to(padding-right, (all: map-get($margins, all), sm: map-get($margins, sm), md: map-get($margins, md)))

@function merge-and-add($map1, $map2)
  @return (all: map-get($map1, all) + map-get($map2, all), sm: map-get($map1, sm) + map-get($map2, sm), md: map-get($map1, md) + map-get($map2, md))
